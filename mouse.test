/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "adc.h"
#include "dma.h"
#include "hrtim.h"
#include "memorymap.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdio.h>
#include <string.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MPU_Config(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

#define ADC1_BUFFER_SIZE 8
uint16_t ADC1_ConvertedValue[ADC1_BUFFER_SIZE];
volatile uint8_t ADC1_DMA_TransferComplete = 0;

/**
 * @brief  ͨ�� UART ��ӡ ADC ����ֵ����
 * @param  None
 * @retval None
 */
void print_adc_values(void)
{
    uint16_t i = 0;
    char str[64];  // ���ڴ洢��ʽ������ַ���
    
    if(ADC1_DMA_TransferComplete == 1)
    {
         for (i = 0; i < 8; i++)
            sprintf(str, "\r\n[ADC Samples]:[%d]=0x%x ",i , ADC1_ConvertedValue[i]);
        
        ADC1_DMA_TransferComplete = 0;
        memset(ADC1_ConvertedValue, 0, sizeof(ADC1_ConvertedValue));
        HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC1_ConvertedValue, ADC1_BUFFER_SIZE);
    }
    

    /* ����ַ��������� */
    memset(str, 0, sizeof(str));

    /* ��ʼ������ӡ��Ϣ */
    sprintf(str, "\r\n[ADC Samples]: ");
    
    /* ������������� ADC ֵ���ַ����� */
    for (i = 0; i < ADC1_BUFFER_SIZE; i++)
    {
        /* ����ǰ ADC ֵ���ӵ��ַ�������ʽΪ "value1, value2, ..." */
        sprintf(str + strlen(str), "%d", ADC1_ConvertedValue[i]);
        if (i < ADC1_BUFFER_SIZE - 1)
        {
            sprintf(str + strlen(str), ", ");
        }
    }
    
    /* ��ӽ������ */
    sprintf(str + strlen(str), "\r\n");

    /* ͨ�� UART �����ַ��� */
    HAL_UART_Transmit(&huart1, (uint8_t*)str, strlen(str), 100);
}


// 读取通道n的数据（n从0开始，对应Rank=n+1）
uint16_t Get_ADC_Value(uint8_t channel)
{
  return ADC1_ConvertedValue[channel];  // 直接读取DMA缓冲区（需确保数据已更新）
}

// 实时获取最新采样值（考虑DMA循环特性）
float Get_ADC_Voltage(uint8_t channel, float vref_mv)
{
  uint16_t raw = ADC1_ConvertedValue[channel];
  return (raw * vref_mv) / 4095.0f;  // 12位ADC，满量程4095
}

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_ADC1_Init();
  MX_HRTIM_Init();
  MX_TIM1_Init();
  MX_USART1_UART_Init();
  MX_USART2_UART_Init();
  MX_USART3_UART_Init();
  MX_TIM15_Init();
  MX_TIM12_Init();
  /* USER CODE BEGIN 2 */
    MX_DMA_Init();
    HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED); 
	__HAL_ADC_ENABLE_IT(&hadc1, ADC_IT_EOC);
	HAL_ADC_Start(&hadc1);
    HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC1_ConvertedValue, 8);

    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);  // PA8
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);  // PE11
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);  // PE13
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);  // PE14
	
    HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1); // PB14
    HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2); // PB15
   
    HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1); // PE5
    HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2); // PE6
    
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      
      static uint16_t duty = 0;
      duty += 10;
      if (duty > htim1.Init.Period)
          duty = 0;
        
      __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, duty);
      __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, duty);
      __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, duty);
      __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, duty);
      
      
      static uint16_t motor_duty = 0;
      motor_duty += 10;
      if (motor_duty > 12500)//(motor_duty > htim15.Init.Period)
          motor_duty = 2500;//0;
      __HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, motor_duty);
      __HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_2, motor_duty);
      
      
      static uint16_t head_duty = 0;
      head_duty += 1;
      if (head_duty > htim12.Init.Period)
          head_duty = 0;
      __HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, head_duty);
      __HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, head_duty);
      
      HAL_Delay(200);
      
      print_adc_values();
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct = {0};

  /* Disables the MPU */
  HAL_MPU_Disable();

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
  MPU_InitStruct.BaseAddress = 0x0;
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
  MPU_InitStruct.SubRegionDisable = 0x87;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);

}

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{m
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
